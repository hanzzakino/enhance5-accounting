import Head from 'next/head'
import { useState, useEffect } from 'react'

const accountNumberList = {
    n101: 'Cash',
    n105: 'Accounts Receivable',
    n115: 'Merchandise Inventory',
    n120: 'Supplies',
    n150: 'Equipment',
    n201: 'Accounts Payable',
    n202: 'Notes Payable',
    n301: 'Capital',
    n302: 'Drawing',
    n401: 'Sales',
    n402: 'Sales Return and Allowances',
    n410: 'Sales Discount',
    n501: 'Purchases',
    n502: 'Purchase Return and Allowances',
    n503: 'Purchase Discount',
    n504: 'Freight In',
    n505: 'Advertising',
    n506: 'Freight Out',
    n510: 'Rent',
    n530: 'Salaries',
    n540: 'Utilities',
}

export default function Home() {
    const [transactions, setTransactions] = useState([])
    const [transactionType, setTransactionType] = useState('debit')
    const [currentTransaction, setCurrentTransaction] = useState({
        day: -1,
        debit: [],
        credit: [],
    })
    const { day, debit, credit } = currentTransaction
    const [currentAccount, setCurrentAccount] = useState({
        accountNumber: '101',
        amount: 0,
    })
    const { accountNumber, amount } = currentTransaction

    const onTransactionChange = (e) => {
        if (e.target.name === 'day') {
            setCurrentTransaction((prevState) => ({
                ...prevState,
                day: Number(e.target.value),
            }))
        } else {
            setCurrentTransaction((prevState) => ({
                ...prevState,
                [e.target.name]: e.target.value,
            }))
        }
    }

    const onAccountChange = (e) => {
        if (e.target.name === 'amount') {
            setCurrentAccount((prevState) => ({
                ...prevState,
                amount: Number(e.target.value),
            }))
        } else {
            setCurrentAccount((prevState) => ({
                ...prevState,
                [e.target.name]: e.target.value,
            }))
        }
    }

    const onTransactionSubmit = () => {
        if (
            transactionBalanced() &&
            day > 0 &&
            debit.length !== 0 &&
            credit.length !== 0
        ) {
            try {
                setTransactions((prevState) => [
                    ...prevState,
                    currentTransaction,
                ])
            } catch (error) {
                console.error(error)
            } finally {
                setCurrentTransaction({
                    day: -1,
                    debit: [],
                    credit: [],
                })
            }
        } else {
            alert('Invalid/Unbalanced Transaction')
        }
    }
    const onAccountSubmit = () => {
        try {
            transactionType === 'debit'
                ? setCurrentTransaction((prevState) => ({
                      ...prevState,
                      debit: [...prevState.debit, currentAccount],
                  }))
                : setCurrentTransaction((prevState) => ({
                      ...prevState,
                      credit: [...prevState.credit, currentAccount],
                  }))
        } catch (error) {
            console.error(error)
        }
    }

    const transactionBalanced = () => {
        let dbtSum = 0
        let cdtSum = 0
        debit.forEach((i) => (dbtSum += i.amount))
        credit.forEach((i) => (cdtSum += i.amount))
        return dbtSum === cdtSum
    }

    return (
        <>
            <Head>
                <accountNumber>Accounting</accountNumber>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div>
                    <p>Accounting</p>
                </div>

                <p>{transactionBalanced() ? 'Balanced' : 'Not Balanced'}</p>

                <p>Account Change</p>
                <form>
                    <label htmlFor="day">Day: </label>
                    <input
                        value={day > 0 ? day : ''}
                        onChange={onTransactionChange}
                        type="number"
                        name="day"
                        id="day"
                    />
                    <br />
                    <label htmlFor="type">Type: </label>
                    <select
                        value={transactionType}
                        onChange={(e) => setTransactionType(e.target.value)}
                        type="text"
                        name="type"
                        id="type"
                    >
                        <option value="debit">Debit</option>
                        <option value="credit">Credit</option>
                    </select>
                    <label htmlFor="accountNumber">Account Number: </label>
                    <select
                        value={accountNumber}
                        onChange={onAccountChange}
                        name="accountNumber"
                        id="accountNumber"
                    >
                        <option value="101">Cash</option>
                        <option value="105">Accounts Receivable</option>
                        <option value="115">Merchandise Inventory</option>
                        <option value="120">Supplies</option>
                        <option value="150">Equipment</option>
                        <option value="201">Accounts Payable</option>
                        <option value="202">Notes Payable</option>
                        <option value="301">Capital</option>
                        <option value="302">Drawing</option>
                        <option value="401">Sales</option>
                        <option value="402">Sales Return and Allowances</option>
                        <option value="410">Sales Discount</option>
                        <option value="501">Purchases</option>
                        <option value="502">
                            Purchase Return and Allowances
                        </option>
                        <option value="503">Purchase Discount</option>
                        <option value="504">Freight In</option>
                        <option value="505">Advertising</option>
                        <option value="506">Freight Out</option>
                        <option value="510">Rent</option>
                        <option value="530">Salaries</option>
                        <option value="540">Utilities</option>
                    </select>

                    <label htmlFor="amount">Amount: </label>
                    <input
                        value={amount}
                        onChange={onAccountChange}
                        type="number"
                        name="amount"
                        id="amount"
                    />
                </form>

                <div>
                    <p>Debit</p>
                </div>
                <div>
                    <p>Credit</p>
                </div>

                <button onClick={onAccountSubmit}>Add account change</button>
                <p>{JSON.stringify(currentTransaction)}</p>
                <p>{transactionType}</p>
                <button onClick={onTransactionSubmit}>
                    Submit transaction
                </button>

                {transactions.length > 0 ? (
                    transactions.map((tr) => <div>{JSON.stringify(tr)}</div>)
                ) : (
                    <></>
                )}
            </main>
        </>
    )
}
